<?php
/**
 * Jogu.php - Minimal PHP Micro Framework + SleekDB NoSQL Store
 * Version 1.0.5 [[ Semantic Versioning MAJOR.MINOR.PATCH ]] Jogu-1.0.5.php
 * Author: John "Kesh" Mahugu
 * Email: johnmahugu.at.gmail.com
 * Created: 15th September 2025, Keshuu Birthday Dedication
 * License: MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * A lightweight micro framework combining routing and simple view rendering
 * with auto .htaccess bootstrap, automatic folder creation, base-folder aware URLs,
 * plus a built-in SleekDB JSON NoSQL store for simple data storage.
 *
 * Dedicated to YHWH (יהוה) - the Eternal One - in humble gratitude.
 * UUID:: hkA0wNAoQ0Wv5KVd0L68NQ
 * NOW:: <?= time() ?>
 */

class Jogu {
    protected $routes = [];
    protected $requestUri;
    protected $requestMethod;
    protected $prod = false;
    protected $baseDir;
    protected $sleekdb = null;

    /**
     * Constructor - adds SleekDB automatic initialization for NoSQL store.
     * Default data store name is 'appstore' under 'data' directory.
     */
    public function __construct(bool $prod = false) {
        $this->prod = $prod;
        $this->requestUri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
        $this->requestMethod = $_SERVER['REQUEST_METHOD'];
        $this->baseDir = $this->detectBaseDir();

        $this->createHtaccessIfNeeded();
        $this->createRequiredFolders();
        $this->createDefaultViews();

        // Initialize SleekDB NoSQL store
        $this->sleekdb = new SleekDB(__DIR__ . '/data', 'appstore');
    }

    protected function detectBaseDir(): string {
        $documentRoot = realpath($_SERVER['DOCUMENT_ROOT']);
        $frameworkDir = realpath(__DIR__);
        $base = str_replace('\\', '/', substr($frameworkDir, strlen($documentRoot)));
        if ($base === false || $base === '') {
            return '/';
        }
        return '/' . trim($base, '/') . '/';
    }

    protected function createHtaccessIfNeeded() {
        $htaccessFile = __DIR__ . '/.htaccess';
        if (!file_exists($htaccessFile)) {
            $content = <<<HTACCESS
# Auto-generated by Jogu.php PHP Micro Framework
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase {$this->baseDir}
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^ index.php [L,QSA]
</IfModule>
HTACCESS;
            file_put_contents($htaccessFile, $content);
            chmod($htaccessFile, 0644);
        }
    }

    protected function createRequiredFolders() {
        $folders = ['views', 'data'];
        foreach ($folders as $folder) {
            $path = __DIR__ . '/' . $folder;
            if (!is_dir($path)) {
                mkdir($path, 0755, true);
            }
        }
    }

    protected function createDefaultViews() {
        $viewsDir = __DIR__ . '/views';
        $homeViewPath = $viewsDir . '/home.php';
        if (!file_exists($homeViewPath)) {
            $homeTemplate = <<<MYPHP
<?php
/** Default Home View for Jogu Framework */
?>
<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8"><title>Welcome to Jogu</title></head>
<body>
<h1>Welcome to the Jogu PHP Micro Framework</h1>
<p>If this is your first time here, enjoy exploring this lightweight, powerful framework!</p>
<nav>
    <ul>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/home')) ?>">Home</a></li>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/about')) ?>">About</a></li>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/contact-us')) ?>">Contact Us</a></li>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/services')) ?>">Services</a></li>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/faq')) ?>">FAQ</a></li>
        <li><a href="<?php echo htmlspecialchars(\$app->link('/test')) ?>">TEST</a></li>
    </ul>
</nav>
</body>
</html>
MYPHP;
            file_put_contents($homeViewPath, $homeTemplate);
            chmod($homeViewPath, 0644);
        }
    }

    public function get(string $path, callable $callback) {
        $this->addRoute('GET', $path, $callback);
    }

    public function post(string $path, callable $callback) {
        $this->addRoute('POST', $path, $callback);
    }

    protected function addRoute(string $method, string $path, callable $callback) {
        $this->routes[] = ['method' => strtoupper($method), 'path' => rtrim($path, '/'), 'callback' => $callback];
    }

    public function listen() {
        $uri = $this->requestUri;
        if (strpos($uri, $this->baseDir) === 0) {
            $uri = '/' . substr($uri, strlen($this->baseDir));
        }
        foreach ($this->routes as $route) {
            if ($this->requestMethod !== $route['method']) continue;
            $params = $this->match($uri, $route['path']);
            if ($params !== false) {
                call_user_func_array($route['callback'], $params);
                return;
            }
        }
        $this->error404();
    }

    protected function match(string $requestUri, string $routePath) {
        $requestSegments = $this->splitPath($requestUri);
        $routeSegments = $this->splitPath($routePath);
        if (count($requestSegments) !== count($routeSegments)) return false;
        $params = [];
        foreach ($routeSegments as $index => $segment) {
            if (preg_match('/^\{(.+)\}$/', $segment, $matches)) {
                $params[$matches[1]] = $requestSegments[$index];
            } elseif ($segment !== $requestSegments[$index]) {
                return false;
            }
        }
        return $params;
    }

    protected function splitPath(string $path) {
        $trimmed = trim($path, '/');
        return $trimmed === '' ? [] : explode('/', $trimmed);
    }

    public function render(string $viewFile, array $data = []) {
        $viewPath = __DIR__ . '/views/' . $viewFile;
        if (!file_exists($viewPath)) {
            $this->error("View file not found: {$viewFile}");
            return;
        }
        $data['app'] = $this;
        extract($data);
        include $viewPath;
    }

    public function link(string $path): string {
        $base = rtrim($this->baseDir, '/');
        $path = '/' . ltrim($path, '/');
        return $base . $path;
    }

    protected function error404() {
        http_response_code(404);
        if (!$this->prod) {
            echo "<h1>404 Not Found</h1><p>The requested URL " . htmlspecialchars($this->requestUri) . " was not found on this server.</p>";
        } else {
            echo "Page not found.";
        }
        exit;
    }

    protected function error(string $msg) {
        http_response_code(500);
        if (!$this->prod) {
            echo "<h1>Error</h1><p>" . htmlspecialchars($msg) . "</p>";
        } else {
            echo "Application error.";
        }
        exit;
    }

    /**
     * Get SleekDB instance for JSON NoSQL store usage - renamed method for convenience
     */
    public function getDB() {
        return $this->sleekdb;
    }
}

/**
 * SleekDB Core (Simplified)
 */
class SleekDB {
    private $storePath;
    private $storeName;

    public function __construct($storePath, $storeName) {
        $this->storePath = rtrim($storePath, '/') . '/' . $storeName;
        $this->storeName = $storeName;
        if (!is_dir($this->storePath)) {
            mkdir($this->storePath, 0755, true);
        }
    }

    public function insert($data) {
        $id = $this->generateId();
        $data['_id'] = $id;
        $data['created_at'] = date('Y-m-d H:i:s');
        file_put_contents("{$this->storePath}/$id.json", json_encode($data));
        return $data;
    }

    public function find($criteria = []) {
        $results = [];
        foreach (glob("{$this->storePath}/*.json") as $file) {
            $data = json_decode(file_get_contents($file), true);
            if ($this->matchesCriteria($data, $criteria)) {
                $results[] = $data;
            }
        }
        return $results;
    }

    public function findOne($criteria) {
        $results = $this->find($criteria);
        return $results ? $results[0] : null;
    }

    public function update($id, $data) {
        $file = "{$this->storePath}/$id.json";
        if (file_exists($file)) {
            $existing = json_decode(file_get_contents($file), true);
            $data['_id'] = $id;
            $data['created_at'] = $existing['created_at'];
            $data['updated_at'] = date('Y-m-d H:i:s');
            file_put_contents($file, json_encode($data));
            return $data;
        }
        return null;
    }

    public function delete($id) {
        $file = "{$this->storePath}/$id.json";
        if (file_exists($file)) {
            unlink($file);
            return true;
        }
        return false;
    }

    private function generateId() {
        return sprintf(
            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0x0fff) | 0x4000,
            mt_rand(0, 0x3fff) | 0x8000,
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff)
        );
    }

    private function matchesCriteria($data, $criteria) {
        foreach ($criteria as $key => $value) {
            if (!isset($data[$key]) || $data[$key] !== $value) {
                return false;
            }
        }
        return true;
    }
}

// UTF-8 Hebrew letters for YHWH (Yod-Heh-Vav-Heh)
echo "\n<!-- \nGratitude and Dedication to יהוה (YHWH) - The Eternal One\nFramework UUID: hkA0wNAoQ0Wv5KVd0L68NQ\nTimestamp: " . time() . "\n-->\n";
/** EOF @ Happy Coding :) */
